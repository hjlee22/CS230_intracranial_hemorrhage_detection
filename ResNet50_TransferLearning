{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# ResNet-50 Transfer Learning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using TensorFlow backend.\n"
     ]
    }
   ],
   "source": [
    "# import libraries \n",
    "import pydicom\n",
    "import glob, pylab, pandas as pd\n",
    "import numpy as np\n",
    "from os import listdir\n",
    "from os.path import isfile, join\n",
    "import matplotlib.pylab as plt\n",
    "import os\n",
    "\n",
    "from keras.applications.resnet50 import ResNet50\n",
    "from keras.applications.resnet50 import preprocess_input, decode_predictions\n",
    "from keras.preprocessing.image import ImageDataGenerator\n",
    "\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import multilabel_confusion_matrix\n",
    "from sklearn.metrics import classification_report\n",
    "from sklearn.metrics import precision_recall_curve\n",
    "\n",
    "from keras.callbacks.callbacks import Callback\n",
    "from keras import layers\n",
    "from keras.layers import Input, Add, Dense, Activation, ZeroPadding2D, BatchNormalization, Flatten, Conv2D, AveragePooling2D, MaxPooling2D, GlobalMaxPooling2D, GlobalAveragePooling2D\n",
    "from keras.models import Model, load_model, Sequential\n",
    "from keras.preprocessing import image\n",
    "from keras.utils import layer_utils\n",
    "from keras.utils.data_utils import get_file\n",
    "from keras.applications.imagenet_utils import preprocess_input\n",
    "import pydot\n",
    "from IPython.display import SVG\n",
    "from keras.utils.vis_utils import model_to_dot\n",
    "from keras.utils import plot_model\n",
    "from keras.initializers import glorot_uniform\n",
    "import scipy.misc\n",
    "from matplotlib.pyplot import imshow\n",
    "%matplotlib inline\n",
    "\n",
    "import random\n",
    "\n",
    "import keras.backend as K\n",
    "K.set_image_data_format('channels_last')\n",
    "K.set_learning_phase(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "16 SUBSET_NUM\n"
     ]
    }
   ],
   "source": [
    "WINDOW_CENTER=40\n",
    "WINDOW_WIDTH=80\n",
    "NUM_CLASSES=6\n",
    "BATCH_SIZE=128\n",
    "RATIO = 10\n",
    "SUBSET_NUM = int(BATCH_SIZE/RATIO)\n",
    "NEGATIVE_NUM = BATCH_SIZE-SUBSET_NUM*5\n",
    "STEP_SIZE_TRAIN = 80\n",
    "STEP_SIZE_DEV = 1\n",
    "STEP_SIZE_TEST = 1\n",
    "\n",
    "print(SUBSET_NUM,\"SUBSET_NUM\")\n",
    "print(NEGATIVE_NUM,\"NEGATIVE_NUM\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data Preprocessing\n",
    "\n",
    "- Dataset is from RSNA Brain Hemorrhage Classification Kaggle Competition Round 1 and only contains single segment of CT scan data in dicom(.dcm) format\n",
    "\n",
    "First, we identify the location of the training images, **trainingImagesDir**. \n",
    "Then, we add the image_names to a list called **trainingImagesID**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# makes the all training .dcm file names into a list\n",
    "trainingImagesDir = \"/home/ubuntu/stage_1_train_images/\"\n",
    "trainingImagesID = [f for f in listdir(trainingImagesDir) if isfile(join(trainingImagesDir, f))]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total labeled data #: 674258\n"
     ]
    }
   ],
   "source": [
    "print(\"Total labeled data #:\",len(trainingImagesID))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Since we have around 700000. Let's split the data into train/dev/test set with 80/10/10. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Dataset at a glance "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "| subtype          | number of examples |\n",
    "|------------------|--------------------|\n",
    "| epidural         | 2761               |\n",
    "| intraparenchymal | 32564              |\n",
    "| intraventricular | 23766              |\n",
    "| subarachnoid     | 32122              |\n",
    "| subdural         | 42496              |\n",
    "| any              | 97103              |"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Noteworthy observations\n",
    "- We can clearly see that there is an imbalance in the number of examples. \n",
    "- Many examples are classified as 2 or more subtypes\n",
    "- Only 14.4% of the total examples are positive(belong in any of the categories) (97103/674260) \n",
    "\n",
    "Next, we are going to split the dataset 80/10/10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>any</th>\n",
       "      <th>epidural</th>\n",
       "      <th>intraparenchymal</th>\n",
       "      <th>intraventricular</th>\n",
       "      <th>subarachnoid</th>\n",
       "      <th>subdural</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ID_000039fa0.dcm</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ID_00005679d.dcm</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>ID_00008ce3c.dcm</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ID_0000950d7.dcm</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>ID_0000aee4b.dcm</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 ID  any  epidural  intraparenchymal  intraventricular  \\\n",
       "0  ID_000039fa0.dcm    0         0                 0                 0   \n",
       "1  ID_00005679d.dcm    0         0                 0                 0   \n",
       "2  ID_00008ce3c.dcm    0         0                 0                 0   \n",
       "3  ID_0000950d7.dcm    0         0                 0                 0   \n",
       "4  ID_0000aee4b.dcm    0         0                 0                 0   \n",
       "\n",
       "   subarachnoid  subdural  \n",
       "0             0         0  \n",
       "1             0         0  \n",
       "2             0         0  \n",
       "3             0         0  \n",
       "4             0         0  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_df= pd.read_csv(\"~/dir_processed_stage_1_train.csv\")\n",
    "train_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "def create_dataset(df, step_size, batch_size=BATCH_SIZE, num_classes=NUM_CLASSES, n=SUBSET_NUM,m=NEGATIVE_NUM):     \n",
    "    epidural_df =df[df[\"epidural\"]==1]\n",
    "    intraparenchymal_df = df[df[\"intraparenchymal\"]==1]\n",
    "    intraventricular_df = df[df[\"intraventricular\"]==1]\n",
    "    subarachnoid_df = df[df[\"subarachnoid\"]==1]\n",
    "    subdural_df = df[df[\"subdural\"]==1]\n",
    "    any_df = df[df[\"any\"]==1]\n",
    "    neg_df = df[df[\"any\"]==0]\n",
    "    \n",
    "    print(\"# of epidural\", len(epidural_df))\n",
    "    print(\"# of intraparenchymal\", len(intraparenchymal_df))\n",
    "    print(\"# of intraventricular\", len(intraventricular_df))\n",
    "    print(\"# of subarachnoid\", len(subarachnoid_df))\n",
    "    print(\"# of subdural \", len(subdural_df))\n",
    "    print(\"# of any\", len(any_df))\n",
    "    print(\"# of neg\", len(neg_df))\n",
    "    print(\"df size: \", len(df))\n",
    "    print(\" \")\n",
    "    \n",
    "    epidural_np = epidural_df.to_numpy()\n",
    "    intraparenchymal_np = intraparenchymal_df.to_numpy()\n",
    "    intraventricular_np = intraventricular_df.to_numpy() \n",
    "    subarachnoid_np = subarachnoid_df.to_numpy()\n",
    "    subdural_np = subdural_df.to_numpy()\n",
    "    any_np = any_df.to_numpy()\n",
    "    neg_np = neg_df.to_numpy()\n",
    "\n",
    "    balanced_label = np.zeros((step_size, batch_size, num_classes), dtype=np.float32)\n",
    "    balanced_id= np.zeros((step_size, batch_size), dtype=\"U16\") #ID_000039fa0.dcm\n",
    "    for i in range(step_size):\n",
    "        for j in range (n):\n",
    "            balanced_label[i][j] = epidural_np[i*n+j][1:7]\n",
    "            balanced_label[i][j+n] = intraparenchymal_np[i*n+j][1:7]\n",
    "            balanced_label[i][j+2*n] = intraventricular_np[i*n+j][1:7]\n",
    "            balanced_label[i][j+3*n] = subarachnoid_np[i*n+j][1:7]\n",
    "            balanced_label[i][j+4*n] = subdural_np[i*n+j][1:7]\n",
    "\n",
    "            balanced_id[i][j] = epidural_np[i*n+j][0]\n",
    "            balanced_id[i][j+n] = intraparenchymal_np[i*n+j][0]\n",
    "            balanced_id[i][j+2*n] = intraventricular_np[i*n+j][0]\n",
    "            balanced_id[i][j+3*n] = subarachnoid_np[i*n+j][0]\n",
    "            balanced_id[i][j+4*n] = subdural_np[i*n+j][0]\n",
    "\n",
    "        for j in range (m):\n",
    "            balanced_label[i][j+5*n] = neg_np[i*n+j][1:7]\n",
    "            balanced_id[i][j+5*n] = neg_np[i*n+j][0]\n",
    "            \n",
    "    return balanced_id, balanced_label"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "m:  674258\n",
      "# of epidural 2258\n",
      "# of intraparenchymal 26227\n",
      "# of intraventricular 19305\n",
      "# of subarachnoid 25971\n",
      "# of subdural  34240\n",
      "# of any 78556\n",
      "# of neg 460850\n",
      "df size:  539406\n",
      " \n",
      "# of epidural 261\n",
      "# of intraparenchymal 3325\n",
      "# of intraventricular 2371\n",
      "# of subarachnoid 3229\n",
      "# of subdural  4275\n",
      "# of any 9781\n",
      "# of neg 57645\n",
      "df size:  67426\n",
      " \n",
      "# of epidural 269\n",
      "# of intraparenchymal 3263\n",
      "# of intraventricular 2529\n",
      "# of subarachnoid 3235\n",
      "# of subdural  4155\n",
      "# of any 9734\n",
      "# of neg 57692\n",
      "df size:  67426\n",
      " \n"
     ]
    }
   ],
   "source": [
    "#random.seed(1)\n",
    "train_np=train_df.to_numpy() \n",
    "random.shuffle(train_np) #shuffles the rows\n",
    "m = len(train_np[:,0])\n",
    "print(\"m: \",m)\n",
    "\n",
    "# split the dataset into train/dev/test (80/10/10)\n",
    "split1 = int(0.8 * m)\n",
    "split2 = int(0.9 * m)\n",
    "train_df = train_np[:split1]\n",
    "dev_df = train_np[split1: split2]\n",
    "test_df = train_np[split2: ]\n",
    "\n",
    "# change the numpy list into a dataframe\n",
    "train_df = pd.DataFrame(train_df)\n",
    "dev_df = pd.DataFrame(dev_df)\n",
    "test_df = pd.DataFrame(test_df)\n",
    "\n",
    "# rename the columns so that we can easily visualize the data\n",
    "train_df=train_df.rename({0:\"ID\", 1: \"any\", 2:\"epidural\", 3:\"intraparenchymal\", 4:\"intraventricular\", 5:\"subarachnoid\", 6:\"subdural\"}, axis=1)\n",
    "dev_df=dev_df.rename({0:\"ID\", 1: \"any\", 2:\"epidural\", 3:\"intraparenchymal\", 4:\"intraventricular\", 5:\"subarachnoid\", 6:\"subdural\"}, axis=1)\n",
    "test_df=test_df.rename({0:\"ID\", 1: \"any\", 2:\"epidural\", 3:\"intraparenchymal\", 4:\"intraventricular\", 5:\"subarachnoid\", 6:\"subdural\"}, axis=1)\n",
    "\n",
    "train_id, train_label = create_dataset(df = train_df, step_size = STEP_SIZE_TRAIN)#, any_df, epidural_df, intraparenchymal_df, intraventricualr_df, subarachnoid_df, subdural_df\n",
    "dev_id, dev_label = create_dataset(df = dev_df, step_size = STEP_SIZE_DEV)  \n",
    "test_id, test_label = create_dataset(df = test_df, step_size = STEP_SIZE_TEST)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data generation\n",
    "\n",
    "- image target size as input to the model is 512x512x1 : This is a standard image size for CT scans\n",
    "- Batch size is set to 128: Anything higher resulted in a crash due to available CPU\n",
    "\n",
    "### Understanding the data\n",
    "\n",
    "Let's first look at what an image(CT scan) looks like. \n",
    "Let's visualize 10 of the epidural images. **pydicom.pixel_array** returns an array with the size (512, 512) for this case. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "def pixel2HU(dcm_image):\n",
    "    pixel_image = dcm_image.pixel_array\n",
    "    HU_image = pixel_image * dcm_image.RescaleSlope + dcm_image.RescaleIntercept\n",
    "    \n",
    "    w=HU_image.shape[0]\n",
    "    h=HU_image.shape[1]\n",
    "    n=448\n",
    "    resized_image = np.zeros((n,n),dtype=np.float32)\n",
    "    p = w-n\n",
    "    p2 = int(p/2) #32\n",
    "    q = h-n\n",
    "    q2 = int(q/2)\n",
    "    \n",
    "    if p >= 0 and q >= 0:\n",
    "        resized_image=HU_image[p2 : p2 + n, q2: q2 + n]\n",
    "    elif p >= 0 and q < 0: \n",
    "        resized_image[:,0:h]=HU_image[p2 : p2 + n, 0: h]\n",
    "    elif p < 0 and q >= 0: \n",
    "        resized_image[0:w,:]=HU_image[0 : w , q2: q2+n]\n",
    "    else: # p < 0 q < 0 \n",
    "        resized_image[0:w, 0:h]=HU_image[0:w, 0:h]\n",
    "    \n",
    "    return resized_image "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For windowing, I used 2 different windowing techniques. \n",
    "**set_sigmoid_window**: uses sigmoid windowing\n",
    "**set_window**: uses linear windowing"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Different windows \n",
    "\n",
    "source: https://radiopaedia.org/articles/ct-head-an-approach\n",
    "\n",
    "Brain matter window: W:80 L:40 Start at the vertex. Look at the brain matter and gyral pattern. Are there any masses, abnormal attenuation or mass effect?\n",
    "\n",
    "Subarachnoid space and ventricles Without changing the window setting review the basal cisterns and sulci. Are they visible and commensurate with the patient's age and ventricular size? Do they extend all the way to the bone? If not is there a subacute (isodense) subdural hemorrhage? Is there any subarachnoid blood? Look in the dependent areas for any small volume subarachnoid hemorrhage particularly in the interpeduncular fossa or occipital horns of the lateral ventricles. Next look at the vessels. Is there a hyperdense MCA or basilar tip hyperdensity suggesting thromboembolism?\n",
    "\n",
    "Grey-white differentiation window: W:8 L:32 or W:40 L:40 Now search for subtle cortical hypoattenuation by assessing grey-white differentiation. The cortical grey matter should be readily differentiated from the white matter. The deep grey matter should be distinct from the white matter also. Pay particular attention to the insular cortex and basal ganglia as they are lost early in middle cerebral artery infarction.\n",
    "\n",
    "Blood/subdural window: W:130-300 L:50-100 Next, concentrate specifically on reviewing for small collections of subdural or extradural blood that may have blended with the skull on routine windowing. Coronal reformats if available are particularly useful for this. Look for tiny subdural hemorrhage around the tentorium and circumferentially as thin hyperdense crescents.\n",
    "\n",
    "Soft tissues window: W:350–400 L:20–60 Don't forget that a CT of the head does not just look at the brain. Soften the window to something suitable for soft tissues and especially in the anterior face including the globe, sinuses, palate and pharynx. Check the scalp for focal lesions or hematomas.\n",
    "\n",
    "Bony review window: W:2800 L:600 Now, and lastly, review the bones. This should always be performed, even when a bony algorithm hasn't been provided or where slice thickness is suboptimal. Note that if there is a history of trauma, then dedicated thin bony images are required to detect undisplaced fractures."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "def set_sigmoid_window(HU_image, window_center=50, window_width=130, ymin=0, ymax=1):\n",
    "    x = HU_image   \n",
    "    y = np.zeros_like(x)  \n",
    "    \n",
    "    U=255 #upper limit of windowing functions\n",
    "    epsilon =1. # margin between upper/lower limit\n",
    "    alpha=np.log(U/epsilon-1.)\n",
    "    W=(2./window_width)*alpha\n",
    "    b=((-2.*window_center)/window_width)*alpha\n",
    "    y = U/(1+np.exp(-(W*x+b)))\n",
    "\n",
    "    return y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "def set_window(HU_image, window_center=50, window_width=130, ymin=0, ymax=1):\n",
    "    x = HU_image\n",
    "    c = window_center\n",
    "    w = window_width    \n",
    "    y = np.zeros_like(x)\n",
    "    \n",
    "    y[x <= (c - 0.5 - (w - 1) / 2)] = ymax\n",
    "    y[x > (c - 0.5 + (w - 1) / 2)] = ymin # by making this ymax it will show up as white if non of the above\n",
    "    y[(x > (c - 0.5 - (w - 1) / 2)) & (x <= (c - 0.5 + (w - 1) / 2))] = \\\n",
    "    ((x[(x > (c - 0.5 - (w - 1) / 2)) & (x <= (c - 0.5 + (w - 1) / 2))] - (c - 0.5)) / (w - 1) + 0.5) * (ymax - ymin) + ymin\n",
    "    \n",
    "    return y        "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**generate_training_batch** : makes training sets that have 3 channels, each channel representing a different window\n",
    "**generate_validation_batch**:makes validation sets that have 3 channels, each channel representing a different window"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "def generate_training_batch(num_classes=NUM_CLASSES, step_size=STEP_SIZE_TRAIN,path=trainingImagesDir, batch_size=BATCH_SIZE, myLabel = train_label, myID = train_id,  window_center=WINDOW_CENTER, window_width=WINDOW_WIDTH): \n",
    "    batch_index = 0\n",
    "    batch_X = np.zeros((batch_size, 448, 448, 3),dtype=np.float32)\n",
    "    batch_Y = np.zeros((batch_size, num_classes),dtype=np.float32)\n",
    "    while True:\n",
    "        #print(\"ID\", batch_index)\n",
    "        Label = myLabel[batch_index]\n",
    "        ID = myID[batch_index]\n",
    "        #print(\"iteration num\", iteration)\n",
    "        for index in range(batch_size):            \n",
    "            pixel_image_temp = pydicom.dcmread(path+ID[index])\n",
    "            HU_image_temp = pixel2HU(pixel_image_temp)\n",
    "            batch_X[index,:,:,0]=set_sigmoid_window(HU_image_temp, 600, 2000) #Bone\n",
    "            batch_X[index,:,:,1]=set_sigmoid_window(HU_image_temp, 40, 80) #Brain\n",
    "            batch_X[index,:,:,2]=set_sigmoid_window(HU_image_temp, 50, 130) #Blood          \n",
    "            batch_Y[index] = Label[index]      \n",
    "        \n",
    "        yield batch_X, batch_Y\n",
    "        batch_index=batch_index+1\n",
    "        if batch_index >= step_size  :\n",
    "            batch_index=0    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "def generate_validation_batch(num_classes=NUM_CLASSES, step_size=STEP_SIZE_DEV,path=trainingImagesDir, batch_size=BATCH_SIZE, myLabel = dev_label, myID = dev_id,  window_center=WINDOW_CENTER, window_width=WINDOW_WIDTH):\n",
    "    \n",
    "    batch_index = 0\n",
    "    batch_X = np.zeros((batch_size, 448, 448, 3),dtype=np.float32)\n",
    "    batch_Y = np.zeros((batch_size, num_classes),dtype=np.float32)\n",
    "    while True:\n",
    "       # print(\"ID\", batch_index)\n",
    "        Label = myLabel[batch_index]\n",
    "        ID = myID[batch_index]\n",
    "        #print(\"iteration num\", iteration)\n",
    "        for index in range(batch_size):            \n",
    "            pixel_image_temp = pydicom.dcmread(path+ID[index])\n",
    "            HU_image_temp = pixel2HU(pixel_image_temp)\n",
    "            \n",
    "            batch_X[index,:,:,0]=set_sigmoid_window(HU_image_temp, 600, 2800) #Bone\n",
    "            batch_X[index,:,:,1]=set_sigmoid_window(HU_image_temp, 40, 80) #Brain\n",
    "            batch_X[index,:,:,2]=set_sigmoid_window(HU_image_temp, 50, 130) #Blood       \n",
    "            \n",
    "            batch_Y[index] = Label[index]      \n",
    "        \n",
    "        yield batch_X, batch_Y\n",
    "        batch_index=batch_index+1\n",
    "        if batch_index >=  step_size  :\n",
    "            batch_index=0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "def test_batch_X(path=trainingImagesDir,batch_size=BATCH_SIZE, myLabel= test_label, myID=test_id):\n",
    "    batch_index = 1\n",
    "    batch_X = np.zeros((batch_size, 448, 448, 3),dtype=np.float32)\n",
    "    ID = myID[batch_index]\n",
    "            \n",
    "    pixel_image_temp = pydicom.dcmread(path+ID[batch_index])\n",
    "    HU_image_temp = pixel2HU(pixel_image_temp)           \n",
    "    batch_X[batch_index,:,:,0]=set_sigmoid_window(HU_image_temp, 600, 2800) #Bone\n",
    "    batch_X[batch_index,:,:,1]=set_sigmoid_window(HU_image_temp, 40, 80) #Brain\n",
    "    batch_X[batch_index,:,:,2]=set_sigmoid_window(HU_image_temp, 50, 130) #Blood      \n",
    "    \n",
    "    return batch_X\n",
    "        \n",
    "def test_batch_Y(num_classes=NUM_CLASSES, batch_size=BATCH_SIZE, myLabel= test_label, myID=test_id):\n",
    "    batch_Y = np.zeros((batch_size, num_classes),dtype=int)\n",
    "    batch_index = 1\n",
    "    batch_Y = myLabel[batch_index]\n",
    "    \n",
    "    return batch_Y\n",
    "\n",
    "def test_batch_ID(path=trainingImagesDir,batch_size=BATCH_SIZE, myLabel= test_label, myID=test_id):\n",
    "    batch_ID = np.zeros((batch_size, 1))\n",
    "    batch_index = 1\n",
    "    batch_ID = myID[batch_index]\n",
    "    return batch_ID\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Model Architecture\n",
    "\n",
    "Base model: ResNet50 \n",
    "\n",
    "- Added a globalAveragePooling layer\n",
    "- Added FullyConnnected layer\n",
    "- Freezed weights\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "def ResNet50_altered(image_h=512, image_w=512, image_c=3, num_classes=NUM_CLASSES):\n",
    "    # get input image size (448, 448, 3)\n",
    "    X_input = Input(shape=(image_h, image_w, image_c))\n",
    "    # get it down to (224, 224, 3) by Max-Pooling\n",
    "    X = MaxPooling2D(pool_size=(2,2), strides=(2,2), padding=\"valid\")(X_input)\n",
    "    # get pre-trained model with last layer turned off   \n",
    "    X2 = ResNet50(input_tensor = X, weights = 'imagenet', include_top = False)\n",
    "    # freeze pre-trained weights\n",
    "    \n",
    "    for layer in X2.layers: \n",
    "        layer.trainable = False\n",
    "    \n",
    "    X3 = X2.output\n",
    "    X3 = GlobalAveragePooling2D()(X3)\n",
    "    X3 = Dense(1024, activation = 'relu')(X3)\n",
    "    predictions = Dense(num_classes, activation = \"sigmoid\", kernel_initializer = glorot_uniform())(X3)\n",
    "\n",
    "    # final training model\n",
    "    model = Model(input=X_input, output=predictions)\n",
    "\n",
    "    return model  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "def compile_model(model):\n",
    "    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n",
    "    print(model.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/ubuntu/anaconda3/lib/python3.6/site-packages/keras_applications/resnet50.py:265: UserWarning: The output shape of `ResNet50(include_top=False)` has been changed since Keras 2.2.0.\n",
      "  warnings.warn('The output shape of `ResNet50(include_top=False)` '\n",
      "/home/ubuntu/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:19: UserWarning: Update your `Model` call to the Keras 2 API: `Model(inputs=Tensor(\"in..., outputs=Tensor(\"de...)`\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "__________________________________________________________________________________________________\n",
      "Layer (type)                    Output Shape         Param #     Connected to                     \n",
      "==================================================================================================\n",
      "input_1 (InputLayer)            (None, 448, 448, 3)  0                                            \n",
      "__________________________________________________________________________________________________\n",
      "max_pooling2d_1 (MaxPooling2D)  (None, 224, 224, 3)  0           input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1_pad (ZeroPadding2D)       (None, 230, 230, 3)  0           max_pooling2d_1[0][0]            \n",
      "__________________________________________________________________________________________________\n",
      "conv1 (Conv2D)                  (None, 112, 112, 64) 9472        conv1_pad[0][0]                  \n",
      "__________________________________________________________________________________________________\n",
      "bn_conv1 (BatchNormalization)   (None, 112, 112, 64) 256         conv1[0][0]                      \n",
      "__________________________________________________________________________________________________\n",
      "activation_1 (Activation)       (None, 112, 112, 64) 0           bn_conv1[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "pool1_pad (ZeroPadding2D)       (None, 114, 114, 64) 0           activation_1[0][0]               \n",
      "__________________________________________________________________________________________________\n",
      "max_pooling2d_2 (MaxPooling2D)  (None, 56, 56, 64)   0           pool1_pad[0][0]                  \n",
      "__________________________________________________________________________________________________\n",
      "res2a_branch2a (Conv2D)         (None, 56, 56, 64)   4160        max_pooling2d_2[0][0]            \n",
      "__________________________________________________________________________________________________\n",
      "bn2a_branch2a (BatchNormalizati (None, 56, 56, 64)   256         res2a_branch2a[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "activation_2 (Activation)       (None, 56, 56, 64)   0           bn2a_branch2a[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "res2a_branch2b (Conv2D)         (None, 56, 56, 64)   36928       activation_2[0][0]               \n",
      "__________________________________________________________________________________________________\n",
      "bn2a_branch2b (BatchNormalizati (None, 56, 56, 64)   256         res2a_branch2b[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "activation_3 (Activation)       (None, 56, 56, 64)   0           bn2a_branch2b[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "res2a_branch2c (Conv2D)         (None, 56, 56, 256)  16640       activation_3[0][0]               \n",
      "__________________________________________________________________________________________________\n",
      "res2a_branch1 (Conv2D)          (None, 56, 56, 256)  16640       max_pooling2d_2[0][0]            \n",
      "__________________________________________________________________________________________________\n",
      "bn2a_branch2c (BatchNormalizati (None, 56, 56, 256)  1024        res2a_branch2c[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "bn2a_branch1 (BatchNormalizatio (None, 56, 56, 256)  1024        res2a_branch1[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "add_1 (Add)                     (None, 56, 56, 256)  0           bn2a_branch2c[0][0]              \n",
      "                                                                 bn2a_branch1[0][0]               \n",
      "__________________________________________________________________________________________________\n",
      "activation_4 (Activation)       (None, 56, 56, 256)  0           add_1[0][0]                      \n",
      "__________________________________________________________________________________________________\n",
      "res2b_branch2a (Conv2D)         (None, 56, 56, 64)   16448       activation_4[0][0]               \n",
      "__________________________________________________________________________________________________\n",
      "bn2b_branch2a (BatchNormalizati (None, 56, 56, 64)   256         res2b_branch2a[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "activation_5 (Activation)       (None, 56, 56, 64)   0           bn2b_branch2a[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "res2b_branch2b (Conv2D)         (None, 56, 56, 64)   36928       activation_5[0][0]               \n",
      "__________________________________________________________________________________________________\n",
      "bn2b_branch2b (BatchNormalizati (None, 56, 56, 64)   256         res2b_branch2b[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "activation_6 (Activation)       (None, 56, 56, 64)   0           bn2b_branch2b[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "res2b_branch2c (Conv2D)         (None, 56, 56, 256)  16640       activation_6[0][0]               \n",
      "__________________________________________________________________________________________________\n",
      "bn2b_branch2c (BatchNormalizati (None, 56, 56, 256)  1024        res2b_branch2c[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "add_2 (Add)                     (None, 56, 56, 256)  0           bn2b_branch2c[0][0]              \n",
      "                                                                 activation_4[0][0]               \n",
      "__________________________________________________________________________________________________\n",
      "activation_7 (Activation)       (None, 56, 56, 256)  0           add_2[0][0]                      \n",
      "__________________________________________________________________________________________________\n",
      "res2c_branch2a (Conv2D)         (None, 56, 56, 64)   16448       activation_7[0][0]               \n",
      "__________________________________________________________________________________________________\n",
      "bn2c_branch2a (BatchNormalizati (None, 56, 56, 64)   256         res2c_branch2a[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "activation_8 (Activation)       (None, 56, 56, 64)   0           bn2c_branch2a[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "res2c_branch2b (Conv2D)         (None, 56, 56, 64)   36928       activation_8[0][0]               \n",
      "__________________________________________________________________________________________________\n",
      "bn2c_branch2b (BatchNormalizati (None, 56, 56, 64)   256         res2c_branch2b[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "activation_9 (Activation)       (None, 56, 56, 64)   0           bn2c_branch2b[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "res2c_branch2c (Conv2D)         (None, 56, 56, 256)  16640       activation_9[0][0]               \n",
      "__________________________________________________________________________________________________\n",
      "bn2c_branch2c (BatchNormalizati (None, 56, 56, 256)  1024        res2c_branch2c[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "add_3 (Add)                     (None, 56, 56, 256)  0           bn2c_branch2c[0][0]              \n",
      "                                                                 activation_7[0][0]               \n",
      "__________________________________________________________________________________________________\n",
      "activation_10 (Activation)      (None, 56, 56, 256)  0           add_3[0][0]                      \n",
      "__________________________________________________________________________________________________\n",
      "res3a_branch2a (Conv2D)         (None, 28, 28, 128)  32896       activation_10[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "bn3a_branch2a (BatchNormalizati (None, 28, 28, 128)  512         res3a_branch2a[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "activation_11 (Activation)      (None, 28, 28, 128)  0           bn3a_branch2a[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "res3a_branch2b (Conv2D)         (None, 28, 28, 128)  147584      activation_11[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "bn3a_branch2b (BatchNormalizati (None, 28, 28, 128)  512         res3a_branch2b[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "activation_12 (Activation)      (None, 28, 28, 128)  0           bn3a_branch2b[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "res3a_branch2c (Conv2D)         (None, 28, 28, 512)  66048       activation_12[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "res3a_branch1 (Conv2D)          (None, 28, 28, 512)  131584      activation_10[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "bn3a_branch2c (BatchNormalizati (None, 28, 28, 512)  2048        res3a_branch2c[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "bn3a_branch1 (BatchNormalizatio (None, 28, 28, 512)  2048        res3a_branch1[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "add_4 (Add)                     (None, 28, 28, 512)  0           bn3a_branch2c[0][0]              \n",
      "                                                                 bn3a_branch1[0][0]               \n",
      "__________________________________________________________________________________________________\n",
      "activation_13 (Activation)      (None, 28, 28, 512)  0           add_4[0][0]                      \n",
      "__________________________________________________________________________________________________\n",
      "res3b_branch2a (Conv2D)         (None, 28, 28, 128)  65664       activation_13[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "bn3b_branch2a (BatchNormalizati (None, 28, 28, 128)  512         res3b_branch2a[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "activation_14 (Activation)      (None, 28, 28, 128)  0           bn3b_branch2a[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "res3b_branch2b (Conv2D)         (None, 28, 28, 128)  147584      activation_14[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "bn3b_branch2b (BatchNormalizati (None, 28, 28, 128)  512         res3b_branch2b[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "activation_15 (Activation)      (None, 28, 28, 128)  0           bn3b_branch2b[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "res3b_branch2c (Conv2D)         (None, 28, 28, 512)  66048       activation_15[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "bn3b_branch2c (BatchNormalizati (None, 28, 28, 512)  2048        res3b_branch2c[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "add_5 (Add)                     (None, 28, 28, 512)  0           bn3b_branch2c[0][0]              \n",
      "                                                                 activation_13[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "activation_16 (Activation)      (None, 28, 28, 512)  0           add_5[0][0]                      \n",
      "__________________________________________________________________________________________________\n",
      "res3c_branch2a (Conv2D)         (None, 28, 28, 128)  65664       activation_16[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "bn3c_branch2a (BatchNormalizati (None, 28, 28, 128)  512         res3c_branch2a[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "activation_17 (Activation)      (None, 28, 28, 128)  0           bn3c_branch2a[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "res3c_branch2b (Conv2D)         (None, 28, 28, 128)  147584      activation_17[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "bn3c_branch2b (BatchNormalizati (None, 28, 28, 128)  512         res3c_branch2b[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "activation_18 (Activation)      (None, 28, 28, 128)  0           bn3c_branch2b[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "res3c_branch2c (Conv2D)         (None, 28, 28, 512)  66048       activation_18[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "bn3c_branch2c (BatchNormalizati (None, 28, 28, 512)  2048        res3c_branch2c[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "add_6 (Add)                     (None, 28, 28, 512)  0           bn3c_branch2c[0][0]              \n",
      "                                                                 activation_16[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "activation_19 (Activation)      (None, 28, 28, 512)  0           add_6[0][0]                      \n",
      "__________________________________________________________________________________________________\n",
      "res3d_branch2a (Conv2D)         (None, 28, 28, 128)  65664       activation_19[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "bn3d_branch2a (BatchNormalizati (None, 28, 28, 128)  512         res3d_branch2a[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "activation_20 (Activation)      (None, 28, 28, 128)  0           bn3d_branch2a[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "res3d_branch2b (Conv2D)         (None, 28, 28, 128)  147584      activation_20[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "bn3d_branch2b (BatchNormalizati (None, 28, 28, 128)  512         res3d_branch2b[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "activation_21 (Activation)      (None, 28, 28, 128)  0           bn3d_branch2b[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "res3d_branch2c (Conv2D)         (None, 28, 28, 512)  66048       activation_21[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "bn3d_branch2c (BatchNormalizati (None, 28, 28, 512)  2048        res3d_branch2c[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "add_7 (Add)                     (None, 28, 28, 512)  0           bn3d_branch2c[0][0]              \n",
      "                                                                 activation_19[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "activation_22 (Activation)      (None, 28, 28, 512)  0           add_7[0][0]                      \n",
      "__________________________________________________________________________________________________\n",
      "res4a_branch2a (Conv2D)         (None, 14, 14, 256)  131328      activation_22[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "bn4a_branch2a (BatchNormalizati (None, 14, 14, 256)  1024        res4a_branch2a[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "activation_23 (Activation)      (None, 14, 14, 256)  0           bn4a_branch2a[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "res4a_branch2b (Conv2D)         (None, 14, 14, 256)  590080      activation_23[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "bn4a_branch2b (BatchNormalizati (None, 14, 14, 256)  1024        res4a_branch2b[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "activation_24 (Activation)      (None, 14, 14, 256)  0           bn4a_branch2b[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "res4a_branch2c (Conv2D)         (None, 14, 14, 1024) 263168      activation_24[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "res4a_branch1 (Conv2D)          (None, 14, 14, 1024) 525312      activation_22[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "bn4a_branch2c (BatchNormalizati (None, 14, 14, 1024) 4096        res4a_branch2c[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "bn4a_branch1 (BatchNormalizatio (None, 14, 14, 1024) 4096        res4a_branch1[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "add_8 (Add)                     (None, 14, 14, 1024) 0           bn4a_branch2c[0][0]              \n",
      "                                                                 bn4a_branch1[0][0]               \n",
      "__________________________________________________________________________________________________\n",
      "activation_25 (Activation)      (None, 14, 14, 1024) 0           add_8[0][0]                      \n",
      "__________________________________________________________________________________________________\n",
      "res4b_branch2a (Conv2D)         (None, 14, 14, 256)  262400      activation_25[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "bn4b_branch2a (BatchNormalizati (None, 14, 14, 256)  1024        res4b_branch2a[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "activation_26 (Activation)      (None, 14, 14, 256)  0           bn4b_branch2a[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "res4b_branch2b (Conv2D)         (None, 14, 14, 256)  590080      activation_26[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "bn4b_branch2b (BatchNormalizati (None, 14, 14, 256)  1024        res4b_branch2b[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "activation_27 (Activation)      (None, 14, 14, 256)  0           bn4b_branch2b[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "res4b_branch2c (Conv2D)         (None, 14, 14, 1024) 263168      activation_27[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "bn4b_branch2c (BatchNormalizati (None, 14, 14, 1024) 4096        res4b_branch2c[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "add_9 (Add)                     (None, 14, 14, 1024) 0           bn4b_branch2c[0][0]              \n",
      "                                                                 activation_25[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "activation_28 (Activation)      (None, 14, 14, 1024) 0           add_9[0][0]                      \n",
      "__________________________________________________________________________________________________\n",
      "res4c_branch2a (Conv2D)         (None, 14, 14, 256)  262400      activation_28[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "bn4c_branch2a (BatchNormalizati (None, 14, 14, 256)  1024        res4c_branch2a[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "activation_29 (Activation)      (None, 14, 14, 256)  0           bn4c_branch2a[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "res4c_branch2b (Conv2D)         (None, 14, 14, 256)  590080      activation_29[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "bn4c_branch2b (BatchNormalizati (None, 14, 14, 256)  1024        res4c_branch2b[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "activation_30 (Activation)      (None, 14, 14, 256)  0           bn4c_branch2b[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "res4c_branch2c (Conv2D)         (None, 14, 14, 1024) 263168      activation_30[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "bn4c_branch2c (BatchNormalizati (None, 14, 14, 1024) 4096        res4c_branch2c[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "add_10 (Add)                    (None, 14, 14, 1024) 0           bn4c_branch2c[0][0]              \n",
      "                                                                 activation_28[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "activation_31 (Activation)      (None, 14, 14, 1024) 0           add_10[0][0]                     \n",
      "__________________________________________________________________________________________________\n",
      "res4d_branch2a (Conv2D)         (None, 14, 14, 256)  262400      activation_31[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "bn4d_branch2a (BatchNormalizati (None, 14, 14, 256)  1024        res4d_branch2a[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "activation_32 (Activation)      (None, 14, 14, 256)  0           bn4d_branch2a[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "res4d_branch2b (Conv2D)         (None, 14, 14, 256)  590080      activation_32[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "bn4d_branch2b (BatchNormalizati (None, 14, 14, 256)  1024        res4d_branch2b[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "activation_33 (Activation)      (None, 14, 14, 256)  0           bn4d_branch2b[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "res4d_branch2c (Conv2D)         (None, 14, 14, 1024) 263168      activation_33[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "bn4d_branch2c (BatchNormalizati (None, 14, 14, 1024) 4096        res4d_branch2c[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "add_11 (Add)                    (None, 14, 14, 1024) 0           bn4d_branch2c[0][0]              \n",
      "                                                                 activation_31[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "activation_34 (Activation)      (None, 14, 14, 1024) 0           add_11[0][0]                     \n",
      "__________________________________________________________________________________________________\n",
      "res4e_branch2a (Conv2D)         (None, 14, 14, 256)  262400      activation_34[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "bn4e_branch2a (BatchNormalizati (None, 14, 14, 256)  1024        res4e_branch2a[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "activation_35 (Activation)      (None, 14, 14, 256)  0           bn4e_branch2a[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "res4e_branch2b (Conv2D)         (None, 14, 14, 256)  590080      activation_35[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "bn4e_branch2b (BatchNormalizati (None, 14, 14, 256)  1024        res4e_branch2b[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "activation_36 (Activation)      (None, 14, 14, 256)  0           bn4e_branch2b[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "res4e_branch2c (Conv2D)         (None, 14, 14, 1024) 263168      activation_36[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "bn4e_branch2c (BatchNormalizati (None, 14, 14, 1024) 4096        res4e_branch2c[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "add_12 (Add)                    (None, 14, 14, 1024) 0           bn4e_branch2c[0][0]              \n",
      "                                                                 activation_34[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "activation_37 (Activation)      (None, 14, 14, 1024) 0           add_12[0][0]                     \n",
      "__________________________________________________________________________________________________\n",
      "res4f_branch2a (Conv2D)         (None, 14, 14, 256)  262400      activation_37[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "bn4f_branch2a (BatchNormalizati (None, 14, 14, 256)  1024        res4f_branch2a[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "activation_38 (Activation)      (None, 14, 14, 256)  0           bn4f_branch2a[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "res4f_branch2b (Conv2D)         (None, 14, 14, 256)  590080      activation_38[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "bn4f_branch2b (BatchNormalizati (None, 14, 14, 256)  1024        res4f_branch2b[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "activation_39 (Activation)      (None, 14, 14, 256)  0           bn4f_branch2b[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "res4f_branch2c (Conv2D)         (None, 14, 14, 1024) 263168      activation_39[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "bn4f_branch2c (BatchNormalizati (None, 14, 14, 1024) 4096        res4f_branch2c[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "add_13 (Add)                    (None, 14, 14, 1024) 0           bn4f_branch2c[0][0]              \n",
      "                                                                 activation_37[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "activation_40 (Activation)      (None, 14, 14, 1024) 0           add_13[0][0]                     \n",
      "__________________________________________________________________________________________________\n",
      "res5a_branch2a (Conv2D)         (None, 7, 7, 512)    524800      activation_40[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "bn5a_branch2a (BatchNormalizati (None, 7, 7, 512)    2048        res5a_branch2a[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "activation_41 (Activation)      (None, 7, 7, 512)    0           bn5a_branch2a[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "res5a_branch2b (Conv2D)         (None, 7, 7, 512)    2359808     activation_41[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "bn5a_branch2b (BatchNormalizati (None, 7, 7, 512)    2048        res5a_branch2b[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "activation_42 (Activation)      (None, 7, 7, 512)    0           bn5a_branch2b[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "res5a_branch2c (Conv2D)         (None, 7, 7, 2048)   1050624     activation_42[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "res5a_branch1 (Conv2D)          (None, 7, 7, 2048)   2099200     activation_40[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "bn5a_branch2c (BatchNormalizati (None, 7, 7, 2048)   8192        res5a_branch2c[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "bn5a_branch1 (BatchNormalizatio (None, 7, 7, 2048)   8192        res5a_branch1[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "add_14 (Add)                    (None, 7, 7, 2048)   0           bn5a_branch2c[0][0]              \n",
      "                                                                 bn5a_branch1[0][0]               \n",
      "__________________________________________________________________________________________________\n",
      "activation_43 (Activation)      (None, 7, 7, 2048)   0           add_14[0][0]                     \n",
      "__________________________________________________________________________________________________\n",
      "res5b_branch2a (Conv2D)         (None, 7, 7, 512)    1049088     activation_43[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "bn5b_branch2a (BatchNormalizati (None, 7, 7, 512)    2048        res5b_branch2a[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "activation_44 (Activation)      (None, 7, 7, 512)    0           bn5b_branch2a[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "res5b_branch2b (Conv2D)         (None, 7, 7, 512)    2359808     activation_44[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "bn5b_branch2b (BatchNormalizati (None, 7, 7, 512)    2048        res5b_branch2b[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "activation_45 (Activation)      (None, 7, 7, 512)    0           bn5b_branch2b[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "res5b_branch2c (Conv2D)         (None, 7, 7, 2048)   1050624     activation_45[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "bn5b_branch2c (BatchNormalizati (None, 7, 7, 2048)   8192        res5b_branch2c[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "add_15 (Add)                    (None, 7, 7, 2048)   0           bn5b_branch2c[0][0]              \n",
      "                                                                 activation_43[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "activation_46 (Activation)      (None, 7, 7, 2048)   0           add_15[0][0]                     \n",
      "__________________________________________________________________________________________________\n",
      "res5c_branch2a (Conv2D)         (None, 7, 7, 512)    1049088     activation_46[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "bn5c_branch2a (BatchNormalizati (None, 7, 7, 512)    2048        res5c_branch2a[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "activation_47 (Activation)      (None, 7, 7, 512)    0           bn5c_branch2a[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "res5c_branch2b (Conv2D)         (None, 7, 7, 512)    2359808     activation_47[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "bn5c_branch2b (BatchNormalizati (None, 7, 7, 512)    2048        res5c_branch2b[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "activation_48 (Activation)      (None, 7, 7, 512)    0           bn5c_branch2b[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "res5c_branch2c (Conv2D)         (None, 7, 7, 2048)   1050624     activation_48[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "bn5c_branch2c (BatchNormalizati (None, 7, 7, 2048)   8192        res5c_branch2c[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "add_16 (Add)                    (None, 7, 7, 2048)   0           bn5c_branch2c[0][0]              \n",
      "                                                                 activation_46[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "activation_49 (Activation)      (None, 7, 7, 2048)   0           add_16[0][0]                     \n",
      "__________________________________________________________________________________________________\n",
      "global_average_pooling2d_1 (Glo (None, 2048)         0           activation_49[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "dense_1 (Dense)                 (None, 1024)         2098176     global_average_pooling2d_1[0][0] \n",
      "__________________________________________________________________________________________________\n",
      "dense_2 (Dense)                 (None, 6)            6150        dense_1[0][0]                    \n",
      "==================================================================================================\n",
      "Total params: 25,692,038\n",
      "Trainable params: 2,104,326\n",
      "Non-trainable params: 23,587,712\n",
      "__________________________________________________________________________________________________\n",
      "None\n",
      "Epoch 1/10\n",
      "80/80 [==============================] - 1490s 19s/step - loss: 0.4234 - accuracy: 0.8127 - val_loss: 0.3821 - val_accuracy: 0.8190\n",
      "Epoch 2/10\n",
      "80/80 [==============================] - 1465s 18s/step - loss: 0.3003 - accuracy: 0.8725 - val_loss: 0.3983 - val_accuracy: 0.8216\n",
      "Epoch 3/10\n",
      "80/80 [==============================] - 1469s 18s/step - loss: 0.2407 - accuracy: 0.9045 - val_loss: 0.4092 - val_accuracy: 0.8151\n",
      "Epoch 4/10\n",
      "80/80 [==============================] - 1471s 18s/step - loss: 0.1965 - accuracy: 0.9266 - val_loss: 0.4280 - val_accuracy: 0.8151\n",
      "Epoch 5/10\n",
      "80/80 [==============================] - 1472s 18s/step - loss: 0.1596 - accuracy: 0.9444 - val_loss: 0.4569 - val_accuracy: 0.8242\n",
      "Epoch 6/10\n",
      "35/80 [============>.................] - ETA: 13:35 - loss: 0.1200 - accuracy: 0.9614"
     ]
    }
   ],
   "source": [
    "model = ResNet50_altered(image_h=448, image_w=448, image_c=3, num_classes=NUM_CLASSES)\n",
    "compile_model(model)\n",
    "\n",
    "train_generator=generate_training_batch()\n",
    "dev_generator=generate_validation_batch()\n",
    "\n",
    "NUM_EPOCHS = 10 \n",
    "model_history = model.fit_generator(generator=train_generator, steps_per_epoch=STEP_SIZE_TRAIN, epochs=NUM_EPOCHS, validation_data=dev_generator, validation_steps=STEP_SIZE_DEV, validation_freq=1)\n",
    "\n",
    "#save model\n",
    "model.save(\"TRIAL5_model_ResNet50_MULTI_RGB_SIGMOID_image224_epoch10_stepSize10.h5\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.plot(model_history.history['accuracy'])\n",
    "plt.plot(model_history.history['val_accuracy'])\n",
    "plt.title('Model Accuracy')\n",
    "plt.ylabel('Accuracy')\n",
    "plt.xlabel('Epoch')\n",
    "plt.legend(['Train','Dev'],loc ='upper left')\n",
    "plt.show()\n",
    "plt.savefig(\"TRIAL5_model_ResNet50_MULTI_RGB_SIGMOID_image224_epoch10_stepSize10.png\")\n",
    "\n",
    "plt.plot(model_history.history['loss'])\n",
    "plt.plot(model_history.history['val_loss'])\n",
    "plt.title('Model Loss')\n",
    "plt.ylabel('Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.legend(['Train','Dev'],loc ='upper left')\n",
    "plt.show()\n",
    "plt.savefig(\"TRIAL5_model_ResNet50_MULTI_RGB_SIGMOID_image224_epoch10_stepSize10.png\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "NUM = STEP_SIZE_TEST*BATCH_SIZE\n",
    "\n",
    "images = test_batch_X() # currently in numpy\n",
    "ID = test_batch_ID()\n",
    "ID = ID.reshape(ID.shape[0],1)\n",
    "y_true = test_batch_Y()\n",
    "y_true = np.array(y_true, dtype=int)\n",
    "print(images.shape)\n",
    "print(ID.shape)\n",
    "print(y_true.shape)\n",
    "\n",
    "my_model = load_model(\"TRIAL5_model_ResNet50_MULTI_RGB_SIGMOID_image224_epoch10_stepSize10.h5\")\n",
    "pred = my_model.predict_on_batch(images)\n",
    "pred_bool = (pred >= 0.5)\n",
    "y_pred = np.array(pred_bool, dtype = int)\n",
    " # currently in numpy (dtype = int)\n",
    "\n",
    "# Save the values \n",
    "prediction = np.append(ID, y_pred, axis = 1)\n",
    "prediction = np.append(prediction, y_true, axis = 1)\n",
    "prediction_df=pd.DataFrame(prediction)\n",
    "prediction_df.rename({0:\"ID\", 1: \"any_pred\", 2:\"any_true\"}, axis=1)\n",
    "prediction_df.to_csv(\"Prediction_TRIAL5_model_ResNet50_MULTI_RGB_SIGMOID_image224_epoch10_stepSize10.csv\")\n",
    "prediction_df.head()\n",
    "\n",
    "#{0:\"ID\", 1: \"any_pred\", 2:\"epidural_pred\", 3:\"intraparenchymal_pred\", 4:\"intraventricular_pred\", 5:\"subarachnoid_pred\", 6:\"subdural_pred\"}, axis=1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def display_wrong_images(path=trainingImagesDir, ID =ID, y_pred=y_pred, y_true=y_true):\n",
    "    # compare 3 windows\n",
    "    fig= plt.figure(figsize = (30,80))\n",
    "    columns = 4 ; rows = 10\n",
    "    \n",
    "    num=1\n",
    "    batch_size = 128\n",
    "    image = np.zeros((batch_size, 448, 448, 3),dtype=int)\n",
    "    for i in range(len(y_pred)):\n",
    "        if (y_pred[i,:].any()!=y_true[i,:].any()) & (num < rows):\n",
    "            pixel_image_temp = pydicom.dcmread(path+ID[i][0])\n",
    "            HU_image_temp = pixel2HU(pixel_image_temp)\n",
    "            image[i,:,:,0]=set_sigmoid_window(HU_image_temp, 600, 2000) #Bone\n",
    "            image[i,:,:,1]=set_sigmoid_window(HU_image_temp, 40, 80) #Brain\n",
    "            image[i,:,:,2]=set_sigmoid_window(HU_image_temp, 50, 130) #Blood               \n",
    "            \n",
    "            ax=fig.add_subplot(rows, columns, (num-1)*columns+1)\n",
    "            plt.imshow(image[i,:,:,0])#, cmap=\"gray\", vmin = 0, vmax = 255)\n",
    "            ax.set_title(\"ID\"+str(ID[i])+\"/y_pred:\"+str(y_pred[i,:])+\"/y_true:\"+str(y_true[i,:]))\n",
    "            fig.add_subplot(rows, columns, (num-1)*columns+2)\n",
    "            plt.imshow(image[i,:,:,1])#, cmap=\"gray\", vmin = 0, vmax = 255)\n",
    "            fig.add_subplot(rows, columns, (num-1)*columns+3)\n",
    "            plt.imshow(image[i,:,:,2])#, cmap=\"gray\", vmin = 0, vmax = 255)\n",
    "            fig.add_subplot(rows, columns, (num-1)*columns+4)\n",
    "            plt.imshow(image[i])#, cmap=\"gray\", vmin = 0, vmax = 255)            \n",
    "            num=num+1          "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "display_wrong_images()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(y_true.shape)\n",
    "print(y_pred.shape)\n",
    "print(pred.shape)\n",
    "fig= plt.figure(figsize = (5,5))\n",
    "precision, recall, _= precision_recall_curve(y_true[:,0], pred[:,0]) \n",
    "plt.plot(precision, recall)\n",
    "#plt.figure()\n",
    "#Compute precision-recall pairs for different probability thresholds"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#print(confusion_matrix(y_true=y_true, y_pred=y_pred))\n",
    "print(classification_report(y_true=y_true, y_pred=y_pred))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
